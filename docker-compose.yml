version: '3'  # Version du format Docker Compose utilisé

services:
  web:
    build: .  # Utilise le Dockerfile dans le répertoire courant pour construire l'image du service "web"
    command: sh -c "uvicorn main:app --reload --port=8000 --host=0.0.0.0"  # Commande à exécuter pour démarrer le service "web"
    env_file:
      - .env  # Charge les variables d'environnement à partir du fichier ".env"
    ports: 
      - 8000:8000  # Redirige le port 8000 de l'hôte vers le port 8000 du conteneur
    volumes:
      - .:/app  # Montage du répertoire courant sur /app dans le conteneur


  database:
    image: postgres  # Utilise l'image officielle PostgreSQL depuis Docker Hub
    ports:
      - "5432:5432"  # Redirige le port 5432 de l'hôte vers le port 5432 du conteneur PostgreSQL
    restart: always  # Redémarre le conteneur PostgreSQL en cas d'échec
    environment:
      POSTGRES_USER: docker  # Configuration des variables d'environnement pour PostgreSQL
      POSTGRES_PASSWORD: docker
      POSTGRES_DB: microservices

  adminer:
    image: adminer  # Utilise l'image officielle Adminer depuis Docker Hub
    restart: always  # Redémarre le conteneur Adminer en cas d'échec
    depends_on:
      - database  # Attend que le conteneur "database" soit opérationnel
    ports:
      - 8080:8080  # Redirige le port 8080 de l'hôte vers le port 8080 du conteneur Adminer
  test:
      image: curlimages/curl  # Utilise une image curl pour effectuer un test HTTP
      depends_on:
        - web  # Attend que le service "web" soit opérationnel
      command: ["curl", "-f", "http://web:8000"]  # Effectue une requête HTTP vers le service "web"

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.2
    environment:
      - discovery.type=single-node
    ports:
      - "9200:9200"
      - "9300:9300"